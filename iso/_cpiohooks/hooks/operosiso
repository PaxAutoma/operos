# args: source, newroot, mountpoint
_mnt_overlayfs() {
    local src="${1}"
    local newroot="${2}"
    local mnt="${3}"
    mkdir -p /run/archiso/cowspace/${cow_directory}/upperdir /run/archiso/cowspace/${cow_directory}/workdir
    mount -t overlay -o lowerdir=${src},upperdir=/run/archiso/cowspace/${cow_directory}/upperdir,workdir=/run/archiso/cowspace/${cow_directory}/workdir airootfs "${newroot}${mnt}"
}

# args: /path/to/image_file, mountpoint
_mnt_sfs() {
    local img="${1}"
    local mnt="${2}"
    local img_fullname="${img##*/}"
    local sfs_dev

    if [[ "${copytoram}" == "y" ]]; then
        msg -n ":: Copying squashfs image to RAM..."
        if ! cp "${img}" "/run/archiso/copytoram/${img_fullname}" ; then
            echo "ERROR: while copy '${img}' to '/run/archiso/copytoram/${img_fullname}'"
            launch_interactive_shell
        fi
        img="/run/archiso/copytoram/${img_fullname}"
        msg "done."
    fi
    sfs_dev=$(losetup --find --show --read-only "${img}")
    echo ${sfs_dev} >> /run/archiso/used_block_devices
    _mnt_dev "${sfs_dev}" "${mnt}" "-r" "defaults"
}

# args: device, mountpoint, flags, opts
_mnt_dev() {
    local dev="${1}"
    local mnt="${2}"
    local flg="${3}"
    local opts="${4}"

    mkdir -p "${mnt}"

    msg ":: Mounting '${dev}' to '${mnt}'"

    while ! poll_device "${dev}" 30; do
        echo "ERROR: '${dev}' device did not show up after 30 seconds..."
        echo "   Falling back to interactive prompt"
        echo "   You can try to fix the problem manually, log out when you are finished"
        launch_interactive_shell
    done

    if mount -o "${opts}" "${flg}" "${dev}" "${mnt}"; then
        msg ":: Device '${dev}' mounted successfully."
    else
        echo "ERROR; Failed to mount '${dev}'"
        echo "   Falling back to interactive prompt"
        echo "   You can try to fix the problem manually, log out when you are finished"
        launch_interactive_shell
    fi
}

_verify_checksum() {
    local layer="${1}"
    local _status
    cd "/run/archiso/bootmnt/${archisobasedir}/${arch}"
    sha512sum -c airootfs-${layer}.sha512 > /tmp/checksum.log 2>&1
    _status=$?
    cd "${OLDPWD}"
    return ${_status}
}

_verify_signature() {
    local layer="${1}"
    local _status
    cd "/run/archiso/bootmnt/${archisobasedir}/${arch}"
    gpg --homedir /gpg --status-fd 1 --verify airootfs-${layer}.sfs.sig 2>/dev/null | grep -qE '^\[GNUPG:\] GOODSIG'
    _status=$?
    cd "${OLDPWD}"
    return ${_status}
}

run_hook() {
    [[ -z "${arch}" ]] && arch="$(uname -m)"
    [[ -z "${copytoram_size}" ]] && copytoram_size="75%"
    [[ -z "${archisobasedir}" ]] && archisobasedir="arch"
    [[ -z "${dm_snap_prefix}" ]] && dm_snap_prefix="arch"
    [[ -z "${archisodevice}" ]] && archisodevice="/dev/disk/by-label/${archisolabel}"
    [[ -z "${cow_spacesize}" ]] && cow_spacesize="256M"

    if [[ -n "${cow_label}" ]]; then
        cow_device="/dev/disk/by-label/${cow_label}"
        [[ -z "${cow_persistent}" ]] && cow_persistent="P"
    elif [[ -n "${cow_device}" ]]; then
        [[ -z "${cow_persistent}" ]] && cow_persistent="P"
    else
        cow_persistent="N"
    fi

    [[ -z "${cow_flags}" ]] && cow_flags="defaults"
    [[ -z "${cow_directory}" ]] && cow_directory="persistent_${archisolabel}/${arch}"
    cow_directory="${cow_directory%/}"
    [[ -z "${cow_chunksize}" ]] && cow_chunksize="8"

    # set mount handler for archiso
    mount_handler="archiso_mount_handler"
}

# This function is called normally from init script, but it can be called
# as chain from other mount handlers.
# args: /path/to/newroot
archiso_mount_handler() {
    local newroot="${1}"
    local airootfs_layers

    if ! mountpoint -q "/run/archiso/bootmnt"; then
        _mnt_dev "${archisodevice}" "/run/archiso/bootmnt" "-r" "defaults"
        if [[ "${copytoram}" != "y" ]]; then
            echo $(readlink -f ${archisodevice}) >> /run/archiso/used_block_devices
        fi
    fi

    for layer in ${archiso_layers}; do
        if [[ "${checksum}" == "y" ]]; then
            if [[ -f "/run/archiso/bootmnt/${archisobasedir}/${arch}/airootfs-${layer}.sha512" ]]; then
                msg -n ":: Verifying checksum for layer ${layer}, please wait..."
                if _verify_checksum ${layer}; then
                    msg "done. Checksum is OK, continue booting."
                else
                    echo "ERROR: one or more files are corrupted"
                    echo "see /tmp/checksum.log for details"
                    launch_interactive_shell
                fi
            else
                echo "ERROR: checksum=y option specified but ${archisobasedir}/${arch}/airootfs-${layer}.sha512 not found"
                launch_interactive_shell
            fi
        fi

        if [[ "${verify}" == "y" ]]; then
            if [[ -f "/run/archiso/bootmnt/${archisobasedir}/${arch}/airootfs-${layer}.sfs.sig" ]]; then
                msg -n ":: Verifying signature for layer ${layer}, please wait..."
                if _verify_signature ${layer}; then
                    msg "done. Signature is OK, continue booting."
                else
                    echo "ERROR: one or more files are corrupted"
                    launch_interactive_shell
                fi
            else
                echo "ERROR: verify=y option specified but ${archisobasedir}/${arch}/airootfs-${layer}.sfs.sig not found"
                launch_interactive_shell
            fi
        fi
    done

    if [[ "${copytoram}" == "y" ]]; then
        msg ":: Mounting /run/archiso/copytoram (tmpfs) filesystem, size=${copytoram_size}"
        mkdir -p /run/archiso/copytoram
        mount -t tmpfs -o "size=${copytoram_size}",mode=0755 copytoram /run/archiso/copytoram
    fi

    if [[ -n "${cow_device}" ]]; then
        _mnt_dev "${cow_device}" "/run/archiso/cowspace" "-r" "${cow_flags}"
        echo $(readlink -f ${cow_device}) >> /run/archiso/used_block_devices
        mount -o remount,rw "/run/archiso/cowspace"
    else
        msg ":: Mounting /run/archiso/cowspace (tmpfs) filesystem, size=${cow_spacesize}..."
        mkdir -p /run/archiso/cowspace
        mount -t tmpfs -o "size=${cow_spacesize}",mode=0755 cowspace /run/archiso/cowspace
    fi
    mkdir -p -m 0700 "/run/archiso/cowspace/${cow_directory}"

    for layer in ${archiso_layers}; do
        _mnt_sfs "/run/archiso/bootmnt/${archisobasedir}/${arch}/airootfs-${layer}.sfs" "/run/archiso/sfs/airootfs-${layer}"
        [[ -n "${airootfs_layers}" ]] && airootfs_layers=":${airootfs_layers}"
        airootfs_layers="/run/archiso/sfs/airootfs-${layer}${airootfs_layers}"
    done

    _mnt_overlayfs "${airootfs_layers}" "${newroot}" "/"

    if [[ "${copytoram}" == "y" ]]; then
        umount -d /run/archiso/bootmnt
    fi
}

# vim:ft=sh:ts=4:sw=4:et:
